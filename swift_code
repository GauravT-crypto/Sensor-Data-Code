import CoreBluetooth

class BLEPeripheral: NSObject, CBCentralManagerDelegate, CBPeripheralDelegate {
    
    var centralManager: CBCentralManager!
    var targetPeripheral: CBPeripheral!
    
    let serviceUUID = CBUUID(string: "f0c9bbf8-34ea-4c89-bc6e-1b495fd007d0")
    let characteristicUUID = CBUUID(string: "b90f3039-3347-4292-8f2e-f9c63e58d597")

    override init() {
        super.init()
        centralManager = CBCentralManager(delegate: self, queue: nil)
    }
    
    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        if central.state == .poweredOn {
            // Scan for peripherals with the matching service UUID
            centralManager.scanForPeripherals(withServices: [serviceUUID], options: nil)
        }
    }
    
    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi: NSNumber) {
        // Found the target peripheral, connect to it
        if peripheral.name == "ESP32_TSL2591_BLE" {
            targetPeripheral = peripheral
            centralManager.stopScan()
            centralManager.connect(targetPeripheral, options: nil)
        }
    }
    
    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        print("Connected to ESP32")
        peripheral.delegate = self
        peripheral.discoverServices([serviceUUID]) // Discover the services
    }

    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        if let services = peripheral.services {
            for service in services {
                if service.uuid == serviceUUID {
                    peripheral.discoverCharacteristics([characteristicUUID], for: service)
                }
            }
        }
    }
    
    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if let characteristics = service.characteristics {
            for characteristic in characteristics {
                if characteristic.uuid == characteristicUUID {
                    // Subscribe to notifications
                    peripheral.setNotifyValue(true, for: characteristic)
                }
            }
        }
    }
    
    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if let value = characteristic.value {
            // Handle the received data (lux value)
            let luxValue = String(data: value, encoding: .utf8) ?? "N/A"
            print("Received lux value: \(luxValue)")
        }
    }
}
